version: '3.7'
x-images:
  env: &env {env_file: [.env, docker.env]}
  {{cookiecutter.app_type}}: &{{cookiecutter.app_type}}
    <<: [ *env ]
    tty: true
    # latest image is only used in prod (without dev & test tools)
    image: "${{'{'}}{{cookiecutter.app_type.upper()}}_IMAGE}:${{'{'}}{{cookiecutter.app_type.upper()}}_IMAGE_VERSION}-dev"
    depends_on:
    - db
    - redis
    {% if 'post' in cookiecutter.db_mode%}- setup-postgres{%endif%}
    working_dir: /code/src
    command:
    - sh
    - '-c'
    - >-
      :{% if 'post' in cookiecutter.db_mode %}
      && dockerize -wait http://setup-postgres -timeout $${POSTGRES_STARTUP_TIMEOUT}
      && {%endif%}/bin/bash /code/init/init.sh
    volumes:
      {%- if not cookiecutter.remove_cron %}
      - ./crontab:/etc/cron.d/{{cookiecutter.app_type}}
      {%- endif %}
      - ./src/{{cookiecutter.django_settings.replace('.', '/')}}/instances:/code/src/{{cookiecutter.django_settings.replace('.', '/')}}/instances
      - mediafiles:/code/public/media
      - statics:/code/public/static
      - logs:/logs/
services:
  mailcatcher:
    <<: [ *env ]
    image: corpusops/mailhog
    hostname: mailcatcher
    volumes: ["mails:/mails"]
    environment:
      MH_STORAGE: maildir
      MH_MAILDIR_PATH: /mails
      MH_SMTP_BIND_ADDR: 0.0.0.0:1025
      MH_API_BIND_ADDR: 0.0.0.0:8025
      MH_UI_BIND_ADDR: 0.0.0.0:8025
      MH_UI_WEB_PATH: /mailcatcher
      MH_AUTH_FILE: /home/mailhog/pw
    user: root
    entrypoint:
      - sh
      - '-c'
      - >
        chown mailhog /mails
        && pw=$$(MH_AUTH_FILE="" MailHog bcrypt "$${MAILCATCHER_PASSWORD:-mailcatcher}")
        && echo "$${MAILCATCHER_USER:-mailcatcher}:$$pw" > $$MH_AUTH_FILE
        && su mailhog -p -c MailHog
  redis:
    <<: [ *env ]
    image: "{{cookiecutter.redis_image}}"
    hostname: redis
    volumes:
      - 'redis:/data'
  db:
    <<: [ *env ]
    image: "{{cookiecutter["{0}_image".format(cookiecutter.db_mode)]}}"
    volumes:
      - postgresql:/var/lib/postgresql/data
  nginx:
    <<: [ *env ]
    restart: always
    image: "{{cookiecutter.nginx_image}}"
    depends_on:
      - {{cookiecutter.app_type}}
    volumes:
      - ./local/terra-back-deploy/prod/etc/nginx/vhost.conf.template:/etc/nginx/conf.d/default.conf.template
      - mediafiles:/public/media/:ro
      - statics:/public/static/
      - logs:/logs/
    command: >
      /bin/sh -c "
      CONF_PREFIX=FRONT_ confenvsubst.sh /etc/nginx/conf.d/default.conf.template
      && exec /bin/supervisord.sh"
    environment:
    - SUPERVISORD_CONFIGS=/etc/supervisor.d/cron /etc/supervisor.d/nginx
  {{cookiecutter.app_type}}:
    <<: [ *{{cookiecutter.app_type}} ]
  {%- if not cookiecutter.remove_cron %}
  cron:
    <<: [ *{{cookiecutter.app_type}} ]
    command:
    - sh
    - '-c'
    - >-
      :{% if 'post' in cookiecutter.db_mode %}
      && dockerize -wait http://setup-postgres -timeout $${POSTGRES_STARTUP_TIMEOUT}
      && {%endif%}/bin/bash /code/init/cron.sh
    depends_on:
      - {{cookiecutter.app_type}}
  {%-endif%}
  backup:
    <<: [ *env ]
    image: "corpusops/dbsmartbackup:pg10"
    restart: always
    volumes:
      - backupdb-dumps:/srv/backups/
      - backupdb-logs:/srv/backups/logs/
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
      - ./local/backup/setup/reconfigure.yml:/setup/reconfigure.yml:ro
  convertit:
    <<: [ *env ]
    image: makinacorpus/convertit
    hostname: convertit
{% if 'post' in cookiecutter.db_mode %}
  setup-postgres:
    <<: [ *env ]
    image: corpusops/pgrouting:10.1-2.5.4
    depends_on:
    - db
    entrypoint:
    - /bin/sh
    - '-c'
    - |-
      set -ex
      POSTGRES_STARTUP_TIMEOUT=$${POSTGRES_STARTUP_TIMEOUT:-45s}
      flag=/started_$$(echo $$POSTGRES_DB|sed -re "s![/:]!__!g")
      if [ -e "$$flag" ];then rm -f "$$flag";fi
      echo "Try connection to pgsql: $$POSTGRES_DB & wait for db init" >&2 \
      && ( while true;do if ( \
        echo "{% if 'gis' in cookiecutter.db_mode%}select 1 from spatial_ref_sys limit 1;select postgis_version();{%else%}select 1{%endif%}"\
        | psql -v ON_ERROR_STOP=1 \
          "postgres://$$POSTGRES_USER:$$POSTGRES_PASSWORD@db/$$POSTGRES_DB"\
      );then touch $$flag && break;fi;done )&
      set -x \
      && dockerize -wait file://$$flag -timeout $${POSTGRES_STARTUP_TIMEOUT} \
      && while true;do printf "HTTP/1.1 200 OK\n\nstarted"| ( nc -l -p 80 || /bin/true);done
{% endif %}
volumes:
  backupdb-logs:
  backupdb-dumps:
  postgresql:
  redis:
  mediafiles:
  statics:
    name: "${{'{'}}{{cookiecutter.app_type.upper()}}_NAME}back-statics-${{'{'}}{{cookiecutter.app_type.upper()}}_IMAGE_VERSION}"
    external: false
  logs:
  mails:
